mojoexamples.json
[
    {
        "Title": "Mojo Examples Repository License",
        "Description": "This section contains the licensing information for the Mojo examples repository. It outlines the terms and conditions under Apache License v2.0 with LLVM Exceptions, including definitions, copyright license grants, patent licenses, redistribution conditions, and liability limitations.",
        "Key Words": ["License", "Apache License v2.0", "LLVM Exceptions", "Copyright", "Patent License", "Redistribution", "Derivative Works", "Limitation of Liability"],
        "Index": 0,
        "Lines": "3-6"
    },
    {
        "Title": "Mojo Code Examples README",
        "Description": "Introduction to Mojo code examples, providing a collection of sample programs and notebooks written in the Mojo programming language. It includes instructions for getting started, running the programs, and setting up a Mojo SDK container.",
        "Key Words": ["Mojo", "Code Examples", "Programming Language", "Getting Started", "Mojo SDK Container", "Dockerfile", "JupyterLab", "Visual Studio Code"],
        "Index": 1,
        "Lines": "7-9"
    },
    {
        "Title": "Mojo Matrix Slice Notebook",
        "Description": "A Jupyter Notebook demonstrating the use of matrix slicing in the Mojo programming language. The content details are not specified in the excerpt.",
        "Key Words": ["Mojo", "Matrix Slicing", "Notebook", "Programming Language", "Jupyter"],
        "Index": 2,
        "Lines": "11-12"
    },
    {
        "Title": "Mojo Plotter README",
        "Description": "README file for the Mojo Plotter, including installation and usage instructions. It covers setting up the conda environment and configuring Mojo to use the Python environment.",
        "Key Words": ["Mojo Plotter", "Installation", "Conda Environment", "Usage", "Python Environment"],
        "Index": 3,
        "Lines": "15-16"
    },
    {
        "Title": "Mojo Plotter Main Code",
        "Description": "Main Mojo code for the Mojo Plotter, showing the integration with Python and use of the matplotlib library for plotting.",
        "Key Words": ["Mojo Plotter", "Main Code", "Python Integration", "matplotlib", "Plotting"],
        "Index": 4,
        "Lines": "19-20"
    },
    {
        "Title": "TensorUtils Initialization",
        "Description": "Initialization file for the TensorUtils in Mojo, primarily containing import statements.",
        "Key Words": ["TensorUtils", "Initialization", "Mojo", "Imports"],
        "Index": 5,
        "Lines": "23-24"
    },
    {
        "Title": "TensorUtils Main Module",
        "Description": "Main module of TensorUtils in Mojo, including functions related to tensor operations and printing.",
        "Key Words": ["TensorUtils", "Main Module", "Tensor Operations", "Printing", "Mojo"],
        "Index": 6,
        "Lines": "27-28"
    },
    {
        "Title": "What's New in Mojo SDK v0.5 Notebook",
        "Description": "A Jupyter Notebook outlining new features and enhancements in Mojo SDK version 0.5. The content details are not specified in the excerpt.",
        "Key Words": ["Mojo SDK", "v0.5", "Updates", "Enhancements", "Notebook", "Jupyter"],
        "Index": 7,
        "Lines": "31-32"
    },
    {
        "Title": "Check Module Python Script",
        "Description": "Python script to check and install missing modules for Mojo examples. It includes functionality to handle module installation and error handling.",
        "Key Words": ["Python Script", "Module Check", "Installation", "Error Handling", "Mojo Examples"],
        "Index": 8,
        "Lines": "35-36"
    },
    {
        "Title": "DeviceInfo in Mojo",
        "Description": "Mojo code sample demonstrating how to print system information using various APIs from the sys module.",
        "Key Words": ["DeviceInfo", "System Information", "Mojo", "APIs", "sys Module"],
        "Index": 9,
        "Lines": "39-40"
    },
    {
        "Title": "Hello Mojo Sample",
        "Description": "A simple Mojo program demonstrating basic range and print functions. It showcases fundamental capabilities of the Mojo language.",
        "Key Words": ["Hello Mojo", "Sample Program", "Range Functions", "Print Functions", "Mojo Basics"],
        "Index": 10,
        "Lines": "43-44"
    },
    {
        "Title": "Hello Interop Mojo Sample",
        "Description": "A Mojo program demonstrating basic range and print functions, and importing a Python program into Mojo for interoperability.",
        "Key Words": ["Hello Interop", "Mojo", "Python Interoperability", "Range Functions", "Print Functions"],
        "Index": 11,
        "Lines": "47-48"
    },
    {
        "Title": "Mandelbrot Set in Mojo",
        "Description": "Mojo implementation of the Mandelbrot set, showcasing complex number operations, parallelization, and vectorization.",
        "Key Words": ["Mandelbrot Set", "Mojo", "Complex Numbers", "Parallelization", "Vectorization"],
        "Index": 12,
        "Lines": "51-52"
    },
    {
        "Title": "Matrix Multiplication in Mojo",
        "Description": "Mojo code sample for matrix multiplication, demonstrating various system optimizations for performance speedups.",
        "Key Words": ["Matrix Multiplication", "Mojo", "System Optimizations", "Performance Speedup"],
        "Index": 13,
        "Lines": "55-56"
    },
    {
        "Title": "Memset Implementation in Mojo",
        "Description": "Mojo sample implementing various memset algorithms and optimizations, including performance measurement and visualization.",
        "Key Words": ["Memset", "Implementation", "Mojo", "Algorithms", "Optimizations", "Performance Measurement"],
        "Index": 14,
        "Lines": "59-60"
    },
    {
        "Title": "N-Body Simulation in Mojo",
        "Description": "This section includes a Mojo language implementation of the nbody benchmarking. The code, provided under Apache License v2.0, demonstrates the use of data structures like StaticTuple and SIMD for creating a simulation of planetary motion.",
        "Key Words": ["N-Body Simulation", "Mojo Language", "Benchmarking", "StaticTuple", "SIMD", "Apache License"],
        "Index": 15,
        "Lines": "62-66"
    },
    {
        "Title": "Low-Level IR in Mojo with MLIR",
        "Description": "A comprehensive exploration of Mojo's low-level intermediate representation (IR) capabilities using MLIR. This section discusses creating a boolean type in Mojo, leveraging MLIR features, and implementing value semantics.",
        "Key Words": ["MLIR", "Intermediate Representation", "Mojo", "Boolean Type", "Value Semantics", "Zero-Cost Abstractions"],
        "Index": 16,
        "Lines": "68-70"
    },
    {
        "Title": "Mojo Language Basics",
        "Description": "An introduction to the basics of the Mojo programming language, highlighting its similarities with Python and unique systems programming features. The section covers language syntax, functions, variable declarations, and Python integration.",
        "Key Words": ["Mojo", "Programming Language", "Python", "Syntax", "Systems Programming", "Type Checking", "Memory Safety"],
        "Index": 17,
        "Lines": "72-74"
    },
    {
        "Title": "Mandelbrot Set in Mojo with Python Plots",
        "Description": "This section presents an implementation of the Mandelbrot set algorithm in Mojo, demonstrating how Mojo can be used alongside Python for tasks like GUIs and visualization. It includes Python interoperability and vectorization techniques.",
        "Key Words": ["Mandelbrot Set", "Mojo", "Python Interoperability", "GUI", "Visualization", "Vectorization"],
        "Index": 18,
        "Lines": "76-78"
    },
    {
        "Title": "Matrix Multiplication in Mojo",
        "Description": "A detailed exploration of implementing matrix multiplication in Mojo. This section progresses from a Python implementation to optimized Mojo versions using types, vectorization, tiling, and parallelization, with performance benchmarks.",
        "Key Words": ["Matrix Multiplication", "Mojo", "Python Implementation", "Optimization", "Vectorization", "Tiling", "Parallelization", "Performance Benchmark"],
        "Index": 19,
        "Lines": "80-81"
    },
    {
        "Title": "Fast memset in Mojo",
        "Description": "This section covers the implementation of a fast memset function in Mojo, utilizing Mojo's autotuning feature. It includes a detailed explanation of the approach, high-level overview, implementation steps, and various optimizations for different sizes.",
        "Key Words": ["memset", "Mojo", "autotuning", "optimization", "memory access", "vector width", "size checks", "implementation"],
        "Index": 20,
        "Lines": "84-85"
    },
    {
        "Title": "Mojo Jupyter notebooks",
        "Description": "This part explains how Mojo supports programming in Jupyter notebooks, similar to Python. It includes instructions for getting started with Mojo notebooks, using Visual Studio Code, and some notes and tips for coding in Mojo within Jupyter notebooks.",
        "Key Words": ["Mojo", "Jupyter notebooks", "programming", "Visual Studio Code", "installation", "code behavior", "Python integration"],
        "Index": 21,
        "Lines": "88-89"
    },
    {
        "Title": "Ray tracing in Mojo",
        "Description": "This tutorial demonstrates implementing ray tracing in Mojo, covering steps from basic definitions to adding background, specular lighting, and more. It explains the creation of `Vec3f` and `Image` structs, ray tracing algorithm, and provides code examples.",
        "Key Words": ["ray tracing", "Mojo", "tutorial", "Vec3f struct", "Image struct", "lighting", "background", "3D graphics"],
        "Index": 22,
        "Lines": "92-93"
    },
    {
        "Title": "Mojo Programming Manual",
        "Description": "An introduction to the Mojo programming language, discussing its ease of use, performance, and Python compatibility. It covers the use of the Mojo compiler, basic systems programming extensions, parameterization, and compile-time metaprogramming.",
        "Key Words": ["Mojo", "programming manual", "compiler", "systems programming", "parameterization", "metaprogramming", "Python integration"],
        "Index": 23,
        "Lines": "96-97"
    },
    {
        "Title": "Python Matrix Multiplication",
        "Description": "A Python script demonstrating naive matrix multiplication, including benchmarking against NumPy's matrix multiplication. The script showcases Python's implementation of matrix multiplication and compares its performance with NumPy's implementation.",
        "Key Words": ["Python", "Matrix Multiplication", "Benchmark", "NumPy", "Performance Comparison", "Python Script", "Naive Implementation"],
        "Index": 24,
        "Lines": "100-101"
    },
    {
        "Title": "Mojo Reduce Sample",
        "Description": "A Mojo sample that implements a simple reduction operation on a large array of values. It includes the use of Kahan summation algorithm for simple summation, comparison with standard library reduction, and benchmarking of the methods.",
        "Key Words": ["Mojo", "Reduction Operation", "Array", "Kahan Summation Algorithm", "Benchmarking", "Standard Library", "Algorithm Patterns"],
        "Index": 25,
        "Lines": "104-105"
    },
    {
        "Title": "Simple Python Interoperability Test",
        "Description": "This Python script is used to test the interoperability of Python with Mojo. It includes a function that prints a greeting and a NumPy array, showcasing the integration of standard Python functionality and NumPy library in a Mojo environment.",
        "Key Words": ["Python Interoperability", "Mojo", "NumPy", "Python Script", "Functionality Test"],
        "Index": 26,
        "Lines": "108-109"
    }
]
